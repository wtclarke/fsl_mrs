###########################################################################
# This file defines the build process for fsl-mrs, as hosted at:
#
#    https://git.fmrib.ox.ac.uk/fsl/fsl_mrs
#
# The build pipeline currently comprises the following stages:
#
#    1. style:     Check coding style - allowed to fail
#
#    2. test:      Unit tests
#
#    3. validate:  Fitting validation and upload fo test results
#                  to https://github.com/wtclarke/lcm_validation/
#
#    4. doc:       Building user documentation which appears at:
#                  https://open.win.ox.ac.uk/pages/fsl/fsl_mrs/
#
#    5. build
#       & deploy:  Build conda package in three stages fsl-ci-pre,
#                  fsl-ci-build, fsl-ci-deploy (fsl-ci-test is not
#                  used in this repository).
#
#
# A custom docker image is used for the test job - images are
# available at:
#
#    https://hub.docker.com/u/wtclarke/
#
# Stage run conditions:
# Style is run in all cases, but allowed to fail.
# Test is run in all cases.
# Doc is only run on master branches.
# Build stages are run according to the rules associated 
#   with https://git.fmrib.ox.ac.uk/fsl/conda/fsl-ci-rules
#
###########################################################################
include:
 - project: fsl/conda/fsl-ci-rules
   file:    .gitlab-ci.yml

stages:
  - style
  - test
  - validate
  - doc
  - fsl-ci-pre
  - fsl-ci-build
  - fsl-ci-test
  - fsl-ci-deploy

####################################
# These anchors are used to restrict
# when and where jobs are executed.
# Copied from the fsl/fsleyes yaml file.
####################################

.except_releases: &except_releases
  except:
    - tags

.test_rules: &test_rules
  rules:
    # Releases are just tags on a release
    # branch, so we don't need to test them.
    - if:   '$CI_COMMIT_TAG != null'
      when: never
    # Don't test if  "[skip-tests]"
    # is in the commit message
    - if:   '$CI_COMMIT_MESSAGE =~ /\[skip-tests\]/'
      when: never
    - if:   '$CI_PIPELINE_SOURCE == "push"'
      when: on_success

.validate_rules: &validate_rules
  rules:
    # Validate on tag / release in upstream (fsl/fsl_mrs) repo
    - if:   ( $CI_COMMIT_TAG != null ) && ( $CI_PROJECT_PATH == "fsl/fsl_mrs" )
      when: on_success
    # if  "[validate]" is in the commit message
    # AND it is to the forked (wclarke/fsl_mrs) repo
    # AND the branch isn't master
    - if:   ($CI_COMMIT_MESSAGE =~ /\[validate\]/ ) && ( $CI_PROJECT_PATH == "wclarke/fsl_mrs" ) && ($CI_COMMIT_BRANCH != "master")
      when: on_success


# ############
# # 1. style 
# ############
flake8:
  <<: *except_releases
  image: python:3.12
  stage: style
  tags:
    - docker
  before_script:
  - python --version
  - pip install flake8
  script:
  - flake8 fsl_mrs
  - flake8 fsl_mrs/scripts/*
  allow_failure: true

############
# 2. test 
############

pytest:
  <<: *test_rules
  image: wtclarke/fsl_mrs_tests:latest
  stage: test
  variables:
    GIT_SUBMODULE_STRATEGY: normal
  tags:
    - docker
  before_script:
  - micromamba create -n fsl_mrs -c conda-forge -y python=3.12
  - eval "$(micromamba shell hook --shell bash)"
  - micromamba activate fsl_mrs
  - micromamba install -y -c conda-forge -c https://fsl.fmrib.ox.ac.uk/fsldownloads/fslconda/public/ --file requirements.txt fsl-flirt fsl-flameo fsl-avwutils fsl-fugue pytest
  - export FSLOUTPUTTYPE="NIFTI_GZ"
  - export FSLDIR="/opt/conda/envs/fsl_mrs"
  - pip install --no-deps .
  script:
  - pytest fsl_mrs/tests
  - pytest fsl_mrs/denmatsim/tests

############
# 3. Validate 
############

fit-validate:
  <<: *validate_rules
  image: wtclarke/fsl_mrs_tests:latest
  stage: validate
  variables:
    GIT_STRATEGY: clone
    GIT_SUBMODULE_STRATEGY: normal
    DEPLOY_CURL_COMMAND_BODY: "'{\"title\":\"New FSL-MRS version\",\"body\":\"Version '$$FSL_MRS_VERSION' \",\"head\":\"fsl_mrs_updates_'$$FSL_MRS_VERSION'\",\"base\":\"main\"}'"
    DEPLOY_CURL_COMMAND: 'curl -X POST -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GITHUB_PAT" https://api.github.com/repos/wtclarke/lcm_validation/pulls -d $DEPLOY_CURL_COMMAND_BODY'
  tags:
    - docker
  before_script:
  # Create an environment to work in
  - micromamba create -n fsl_mrs -c conda-forge -y python=3.12
  - eval "$(micromamba shell hook --shell bash)"
  - micromamba activate fsl_mrs
  # Install all the FSL tools needed
  - micromamba install -c https://fsl.fmrib.ox.ac.uk/fsldownloads/fslconda/public/ -c conda-forge fsl-flirt fsl-flameo fsl-avwutils fsl-fugue
  - export FSLOUTPUTTYPE="NIFTI_GZ"
  - export FSLDIR="/opt/conda/envs/fsl_mrs"
  # Get the git tags.
  - git config --global --add safe.directory /builds/wclarke/fsl_mrs
  - git config --global --add safe.directory /builds/fsl/fsl_mrs
  - micromamba install -y -c conda-forge -c https://fsl.fmrib.ox.ac.uk/fsldownloads/fslconda/public/ --file requirements.txt
  - pip install --no-deps .
  # Setup ssh communication with the github instance
  # https://docs.gitlab.com/ee/ci/ssh_keys/#ssh-keys-when-using-the-docker-executor
  - eval $(ssh-agent -s)
  - echo "$LCM_VALIDATION_KEY" | tr -d '\r' | ssh-add -
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - ssh-keyscan -H github.com >> ~/.ssh/known_hosts

  script:
  - FSL_MRS_VERSION=${CI_COMMIT_TAG:-"$CI_COMMIT_SHORT_SHA"} && export FSL_MRS_VERSION
  - echo $FSL_MRS_VERSION
  - git clone git@github.com:wtclarke/lcm_validation.git
  - cd lcm_validation
  - git config --global user.name "wtclarke"
  - git config --global user.email "william.clarke@ndcn.ox.ac.uk"
  - git checkout -b "fsl_mrs_updates_${FSL_MRS_VERSION}" main
  - python ../validation/mrs_challenge.py --mh_samples 20 results $FSL_MRS_VERSION
  - ls results/fsl_mrs_newton
  - git add *
  - git commit -m "Results for FSL-MRS ${FSL_MRS_VERSION}"
  - git push origin "fsl_mrs_updates_${FSL_MRS_VERSION}"
  - echo $DEPLOY_CURL_COMMAND
  - 'eval "$DEPLOY_CURL_COMMAND"'
  allow_failure: true

############
# 4. doc 
############

pages:
  variables:
    GIT_LFS_SKIP_SMUDGE: "1"
    GIT_STRATEGY: clone
  only:
    - branches@wclarke/fsl_mrs
    - tags@fsl/fsl_mrs
  image: python:3.12
  stage: doc
  tags:
    - docker
  script:
  - git describe --tag --dirty
  - pip install -U sphinx sphinx_rtd_theme "docutils<0.21" "snowballstemmer<3"
  - pip install --no-deps .
  - sphinx-build -b html ./docs/user_docs public
  artifacts:
    paths:
    - public
